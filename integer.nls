extensions [matrix]
__includes ["communication.nls"]

to-report solve_coalition[lista trabajadores tarea]
  
  
  let p length lista
  let X  matrix:make-constant p 1 0

  let B  extract_req_task tarea  
  let list_who extract_who_agents lista  
  let A set-matrix-from-agent list_who
  let flag possible list_who tarea
  
  show list_who
  
  if flag = false
  [
    report []
  ]

;  show B
  let resultado iteration A X B list_who tarea
  let final extract_whos list_who resultado
;  show resultado
  
  report final
  
end

to-report iteration[ A X B whos tarea]

   let select []
   let temp []
   let result []
   let rest_temp []
   let t 0
   let i 0
   let j 0
   let k 0
   let pos -1
   let p length whos
    
   set i 0
   let flag true
   
   while [ flag ]
   [
     set result []
     set i 0
   while[ i < p][

     set j 0
     
     while [j < p]     
     [
       matrix:set X j 0 0
       set j j + 1
     ]
     matrix:set X i 0 1     
     ;; ponemos los 1 guardados
     set temp select
     
     while[ not empty? temp]
     [
       set t first temp
       set temp remove-item 0 temp       
       matrix:set X t 0 1
     ]
     
     set rest_temp infactibilidad A X B     
     set result lput rest_temp result     
     set i i + 1
     
     ]
   set pos maxima_infactibilidad A X B select result 
   set select lput pos select
;   show result
;   show select
   set t item pos result
   
   if t = 0
   [
     set flag false
   ]
   
   if k > 1000
   [
     set flag false 
   ]
   set k k + 1
]
   report select
    
end

to-report extract_whos[list_whos ids]
  let result []
  let temp 0
  
  while [not empty? ids]
  [
    set temp first ids
    set ids remove-item 0 ids
    
    set result lput item temp list_whos result
  ]
  
  report result
  
end

to-report maxima_infactibilidad[ A X B select result ]
  
  let sum_temp 0
  let sum_tarea 0
  let sum_max 0
  let minimum 100000
  let pos -1
  let temp 0
  let maximo max result
  let extract 0
  let i 0
  
  ;; suma de requerimientos de tarea
  
  set sum_tarea matrix:get B 0 0 + matrix:get B 1 0 + matrix:get B 2 0 + matrix:get B 3 0
  
  while[ not empty? select]
  [
    set temp first select
    set select remove-item 0 select
    
    set sum_temp sum_temp + matrix:get A 0 temp  + matrix:get A 1 temp   + matrix:get A 2 temp   + matrix:get A 3 temp
    
  ]
  
  set i 0
  
  while [ not empty? result]
  [
    set extract first result
    set result remove-item 0 result
        
    if maximo = extract
    [
        set sum_max matrix:get A 0 i + matrix:get A 1 i + matrix:get A 2 i + matrix:get A 3 i
;;        show sum_temp + sum_max 
        
        if(sum_temp + sum_max - sum_tarea) < minimum
        [
          set pos i
          set minimum sum_temp + sum_max - sum_tarea
        ]
    ]
    
    set i i + 1
  ]
  
  
  report pos
  
end

to-report infactibilidad [A X B]
  
  let resultado  matrix:times A X
  set resultado matrix:plus resultado matrix:times-scalar B -1
  let temp 0
  let suma 0
  let i 0
  
  while [ i < 4]
  [
    set temp matrix:get resultado i 0
    
    if temp < 0
    [
      set suma suma + temp
    ]
    
    set i i + 1
  ]

  report suma
end


to-report set-matrix-from-agent[lista]
  
    let p length lista
    let A  matrix:make-constant 4 p 0
    let i 0
    let temp 0
    
    while[not empty? lista]
    [
     set temp first lista
     set lista remove-item 0 lista
     
     ask worker temp [
      
        matrix:set A 0 i tiempo
        matrix:set A 1 i recurso
        matrix:set A 2 i competencia
        matrix:set A 3 i calidad 
     ]
     
     set i i + 1
      
    ]
    
    report A
    
end

to-report extract_who_agents[lista]

  let msg ""
  let resultado []
  
  while [ not empty? lista][
    
    set msg first lista
    set resultado lput read-from-string get-sender msg resultado       
    set lista remove-item 0 lista
  ]
    
  report resultado
end

;; extract requeriments of task to vector

to-report extract_req_task[tarea]
  
  let B  matrix:make-constant 4 1 0
  
  ask tarea [
    matrix:set B 0 0 tiempo
    matrix:set B 1 0 recurso
    matrix:set B 2 0 competencia
    matrix:set B 3 0 calidad
    ]
  
  report B
end

to-report possible[ list_id tarea]
  

  let sumtiem 0
  let sumres 0
  let sumcomp 0
  let sumcal 0
  let temp 0
  let flag false
  
  
  
  while [not empty? list_id]
  [
    set temp first list_id 
    set list_id remove-item 0 list_id
    
    ask worker temp[
      
      set sumtiem sumtiem + tiempo
      set sumres sumres + recurso
      set sumcomp sumcomp + competencia
      set sumcal sumcal + calidad
    ]
  ]
  
  ask tarea[
    if  tiempo <= sumtiem and recurso <= sumres and competencia <= sumcomp and calidad <= sumcal
    [
      set flag true
    ]
  ]
  
  report flag
end
  